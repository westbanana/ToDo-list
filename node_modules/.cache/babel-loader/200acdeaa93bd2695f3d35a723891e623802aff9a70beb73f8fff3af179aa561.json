{"ast":null,"code":"var _jsxFileName = \"C:\\\\Programing\\\\Projects\\\\todo-list\\\\src\\\\components\\\\CreateToDo\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport style from './style.module.scss';\nimport getData from '../Helpers/GetData';\n\n// import Hint from '../Hint';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreateToDo = _ref => {\n  _s();\n  let {\n    inputToDoName,\n    setInputToDoName,\n    toDoList\n  } = _ref;\n  const [emptyClickCount, setEmptyClickCount] = useState(0);\n  const stopRef = useRef();\n  const createToDo = e => {\n    e.stopPropagation();\n    if (inputToDoName.length) {\n      const todo = {\n        name: inputToDoName,\n        time: getData(),\n        id: new Date().getTime(),\n        isActive: false\n      };\n      toDoList.push(todo);\n      localStorage.setItem('ToDos', JSON.stringify(toDoList));\n      setInputToDoName('');\n    } else {\n      setEmptyClickCount(prev => prev + 1);\n    }\n  };\n  useEffect(() => {\n    if (emptyClickCount % 10 === 0 && emptyClickCount >= 10) {\n      stopRef.current.classList.remove(style.stopSpanHide);\n      stopRef.current.classList.add(style.stopSpanShow);\n      setTimeout(() => {\n        stopRef.current.classList.remove(style.stopSpanShow);\n        stopRef.current.classList.add(style.stopSpanHide);\n      }, 3000);\n    }\n  }, [emptyClickCount]);\n  const onChangeHandler = useCallback(e => {\n    setInputToDoName(e.target.value);\n  }, [inputToDoName]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.main,\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      ref: stopRef,\n      className: style.stopSpanHide,\n      children: \"\\u0410\\u0421\\u0422\\u0410\\u041D\\u0410\\u0412\\u0418\\u0422\\u0415\\u0421\\u042C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      action: \"#\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        maxLength: 300,\n        placeholder: \"Write what to do\",\n        value: inputToDoName,\n        onChange: e => onChangeHandler(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createToDo,\n        type: \"submit\",\n        children: \"Create\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: `TODOs: ${toDoList.length}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(CreateToDo, \"u+OD77CuxPdeU6ArkEq0xEBGE8o=\");\n_c = CreateToDo;\nexport default CreateToDo;\nvar _c;\n$RefreshReg$(_c, \"CreateToDo\");","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","useState","style","getData","CreateToDo","inputToDoName","setInputToDoName","toDoList","emptyClickCount","setEmptyClickCount","stopRef","createToDo","e","stopPropagation","length","todo","name","time","id","Date","getTime","isActive","push","localStorage","setItem","JSON","stringify","prev","current","classList","remove","stopSpanHide","add","stopSpanShow","setTimeout","onChangeHandler","target","value","main"],"sources":["C:/Programing/Projects/todo-list/src/components/CreateToDo/index.js"],"sourcesContent":["import React, {\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\n\nimport style from './style.module.scss';\n\nimport getData from '../Helpers/GetData';\n\n// import Hint from '../Hint';\n\nconst CreateToDo = ({ inputToDoName, setInputToDoName, toDoList }) => {\n  const [emptyClickCount, setEmptyClickCount] = useState(0);\n  const stopRef = useRef();\n  const createToDo = (e) => {\n    e.stopPropagation();\n    if (inputToDoName.length) {\n      const todo = {\n        name: inputToDoName,\n        time: getData(),\n        id: (new Date().getTime()),\n        isActive: false,\n      };\n      toDoList.push(todo);\n      localStorage.setItem('ToDos', JSON.stringify(toDoList));\n      setInputToDoName('');\n    } else {\n      setEmptyClickCount(prev => prev + 1);\n    }\n  };\n  useEffect(() => {\n    if (emptyClickCount % 10 === 0 && emptyClickCount >= 10) {\n      stopRef.current.classList.remove(style.stopSpanHide);\n      stopRef.current.classList.add(style.stopSpanShow);\n      setTimeout(() => {\n        stopRef.current.classList.remove(style.stopSpanShow);\n        stopRef.current.classList.add(style.stopSpanHide);\n      }, 3000);\n    }\n  }, [emptyClickCount]);\n  const onChangeHandler = useCallback((e) => {\n    setInputToDoName(e.target.value);\n  }, [inputToDoName]);\n  return (\n    <div className={style.main}>\n      <span\n        ref={stopRef}\n        className={style.stopSpanHide}\n      >\n        АСТАНАВИТЕСЬ\n      </span>\n      <form action=\"#\">\n        <input\n          type=\"text\"\n          maxLength={300}\n          placeholder=\"Write what to do\"\n          value={inputToDoName}\n          onChange={e => onChangeHandler(e)}\n        />\n        <button\n          onClick={createToDo}\n          type=\"submit\"\n        >\n          Create\n        </button>\n        <span>{`TODOs: ${toDoList.length}`}</span>\n      </form>\n      {/* <Hint\n        tittle=\"Заполните поле ввода\"\n        description=\"Чтобы создать TODO введите минимум 1 символ\"\n        isShowed={hintIsShowed}\n        closeHint={CloseHint}\n      /> */ }\n    </div>\n  );\n};\n\nexport default CreateToDo;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}